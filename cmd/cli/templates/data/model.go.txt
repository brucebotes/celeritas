package data

import (
	  "github.com/google/uuid"
    up "github.com/upper/db/v4"
    "time"
)
// $MODELNAME$ struct
type $MODELNAME$ struct {
    ID        string    `db:"id,omitempty"`
    CreatedAt time.Time `db:"created_at"`
    UpdatedAt time.Time `db:"updated_at"`
}

// Table returns the table name
func (t *$MODELNAME$) Table() string {
    return "$TABLENAME$"
}

// GetAll gets all records from the database, using upper
func (t *$MODELNAME$) GetAll(condition up.Cond) ([]*$MODELNAME$, error) {
    collection := upper.Collection(t.Table())
    var all []*$MODELNAME$

    res := collection.Find(condition)
    defer res.Close()
    err := res.All(&all)
    if err != nil {
        return nil, err
    }

    return all, err
}

// Get gets one record from the database, by id, using upper
func (t *$MODELNAME$) Get(id string) (*$MODELNAME$, error) {
    var one $MODELNAME$
    collection := upper.Collection(t.Table())

    res := collection.Find(up.Cond{"id": id})
    defer res.Close()
    err := res.One(&one)
    if err != nil {
        return nil, err
    }
    return &one, nil
}

// Update updates a record in the database, using upper
func (t *$MODELNAME$) Update(m $MODELNAME$) error {
    m.UpdatedAt = time.Now()
    collection := upper.Collection(t.Table())
    res := collection.Find(up.Cond{"id =": m.ID})
    defer res.Close()
    err := res.Update(&m)
    if err != nil {
        return err
    }
    return nil
}

// Delete deletes a record from the database by id, using upper
func (t *$MODELNAME$) Delete(id string) error {
    collection := upper.Collection(t.Table())
    res := collection.Find(up.Cond{"id =": id})
    defer res.Close()
    err := res.Delete()
    if err != nil {
        return err
    }
    return nil
}

// Insert inserts a model into the database, using upper
func (t *$MODELNAME$) Insert(m $MODELNAME$) (string, error) {
	  m.ID = uuid.New().String()
    m.CreatedAt = time.Now()
    m.UpdatedAt = time.Now()
    collection := upper.Collection(t.Table())
    res, err := collection.Insert(m)
    if err != nil {
        return "", err
    }

    return m.ID, nil
}

// Builder is an example of using upper's sql builder
func (t *$MODELNAME$) Builder(id string) ([]*$MODELNAME$, error) {
    collection := upper.Collection(t.Table())

    var result []*$MODELNAME$

    err := collection.Session().
        SQL().
        SelectFrom(t.Table()).
        Where("id = ?", id).
        OrderBy("id").
        All(&result)
    if err != nil {
        return nil, err
    }
    return result, nil
}


