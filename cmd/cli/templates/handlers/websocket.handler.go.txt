package handlers

import (
	"fmt"
	"io"
	"io/ioutil"
	"net/http"

	"github.com/Jeffail/gabs/v2"
)

//WsAuthenticate  athencticates the user for Private and Pressence channel useage
// A route must be set up to interface pusher.js in the browser with is endpoint
//
// example : a.post("/pusher/auth", a.Handlers.WsAuthenticate)
func (h *Handlers) WsAuthenticate(w http.ResponseWriter, r *http.Request) {
	userID := h.App.Session.GetInt(r.Context(), "userID")
	if userID == 0 {
		h.App.ErrorLog.Println("User not authenticated")
		return
	}
	u, err := h.Models.Users.Get(userID)
	if err != nil {
		h.App.ErrorLog.Println("error authenticating websocket user:", err)
		return
	}
	params, _ := io.ReadAll(r.Body)

	response, err := h.App.AuthenticateWebsocket(userID, u.FirstName, params)
	if err != nil {
		h.App.ErrorLog.Println("error authenticating websocket user:", err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	_, _ = w.Write(response)
}

//WsWebhook  listens for events from the Private/Pressence channel
// A route must be set up to interface with the pusher server webhook.
// (and the pusher server must be configured/enabled to send to is endpoint)
//
// example : a.post("/pusher/hook", a.Handlers.WsWebhook)
func (h *Handlers) WsWebhook(w http.ResponseWriter, r *http.Request) {
	buff, err := ioutil.ReadAll(r.Body)
	if err != nil {
		fmt.Println("Error reading buff", err)
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(""))
		return
	}
	response, err := h.App.ListenForWebsocketEvents(r, buff)
	if err != nil {
		fmt.Println("Webhook is invalid :(", err)
		// inspect JSON object using the gabs JSON utility
		jsonParsed, err := gabs.ParseJSON(buff)
		if err != nil {
			fmt.Println("Error reading buff", err)
			w.WriteHeader(http.StatusOK)
			w.Write([]byte(""))
			return
		}
		fmt.Println(">>>", jsonParsed.StringIndent("", "  "))

		// usually the error is related to the data item which is not set as a string
		/* the long way of targetting the data element in the object
		for _, obj := range jsonParsed.Search("events").Children() {
			for key, child := range obj.ChildrenMap() {
				if key == "data" {
					fmt.Printf("Value type is (not string?): %v\n", child.Data())
				}
			}
		}
		*/

		// or the short way
		fmt.Printf("Value type for data element is (not string?): %v\n", jsonParsed.Path("events.0.data").Data())

		h.App.ErrorLog.Println("error processeing webhook data:", err)
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(""))
		return
	}

	// dump event data for now
	h.App.InfoLog.Printf(">>>%+v\n", response.Events)

	w.WriteHeader(http.StatusOK)
	w.Write([]byte(""))
}

// SendPrivateMessage is sample code for sending to private channel
func (h *Handlers) WsSendPrivateMessage(w http.ResponseWriter, r *http.Request) {
	msg := r.URL.Query().Get("msg")
	id := r.URL.Query().Get("id")

	data := make(map[string]string)
	data["msg"] = msg

	err := h.App.BroadcastWebsocketMessage(fmt.Sprintf("private-channel-%s", id), "private-message", data)
	if err != nil {
		h.App.ErrorLog.Println("error sending private websocket message:", err)
	}
}

// SendPublicMessage is sample code for sending to the public channel
func (h *Handlers) WsSendPublicMessage(w http.ResponseWriter, r *http.Request) {
	msg := r.URL.Query().Get("msg")

	data := make(map[string]string)
	data["msg"] = msg

	err := h.App.BroadcastWebsocketMessage("public-channel", "public-message", data)
	if err != nil {
		h.App.ErrorLog.Println("error sending public websocket message:", err)
	}
}
