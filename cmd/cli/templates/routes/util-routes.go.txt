package main

import (
	"fmt"
	"myapp/data"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
)

func (a *application) UtilityRoutes() http.Handler {
	r := chi.NewRouter()

	r.Route("/util", func(mux chi.Router) {
		// TESTING ROUTES
		r.Get("/create-user", func(w http.ResponseWriter, r *http.Request) {

			u := data.User{
				FirstName: "Admin",
				LastName:  "Administrator",
				Email:     "me@here.com",
				Active:    1,
				Password:  "password",
			}

			id, err := a.Models.Users.Insert(u)
			if err != nil {
				a.App.ErrorLog.Println(err)
				return
			}

			fmt.Fprintf(w, "%d: %s", id, u.FirstName)
		})

		r.Get("/get-all-users", func(w http.ResponseWriter, r *http.Request) {
			users, err := a.Models.Users.GetAll()
			if err != nil {
				a.App.ErrorLog.Println(err)
				return
			}

			for _, x := range users {
				fmt.Fprint(w, x.LastName)
			}
		})

		r.Get("/get-user/{id}", func(w http.ResponseWriter, r *http.Request) {
			id, _ := strconv.Atoi(chi.URLParam(r, "id"))
			user, err := a.Models.Users.Get(id)
			if err != nil {
				a.App.ErrorLog.Println(err)
				return
			}

			fmt.Fprintf(w, "%s %s %s", user.FirstName, user.LastName, user.Email)
		})

		r.Get("/update-user/{id}", func(w http.ResponseWriter, r *http.Request) {
			id, _ := strconv.Atoi(chi.URLParam(r, "id"))
			u, err := a.Models.Users.Get(id)
			if err != nil {
				a.App.ErrorLog.Println(err)
				return
			}

			u.LastName = a.App.RandomString(10)

			validator := a.App.Validator(nil)
			u.LastName = ""

			u.Validate(validator)

			if !validator.Valid() {
				fmt.Fprint(w, "failed validation")
				return
			}

			err = u.Update(*u)
			if err != nil {
				a.App.ErrorLog.Println(err)
				return
			}

			fmt.Fprintf(w, "%s %s %s", u.FirstName, u.LastName, u.Email)
		})

	})

	return r
}

